# -*- coding: utf-8 -*-
"""Untitled11.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pKVcVVmwySgy_LMLOY0xQ9MSxtyqhNvN
"""

pip install mysql-connector-python faker

import mysql.connector
from faker import Faker
import random

# Initialize Faker
fake = Faker()

# Connect to MySQL
conn = mysql.connector.connect(host="gateway01.ap-southeast-1.prod.aws.tidbcloud.com",
                              user="7Z3SRE1xmB2xsHv.root",
                              port=4000,
                              password="593g7sDIAPe2H7Og",
                              database="PROJECT_1")

cursor = conn.cursor()

# Check if the table exists
cursor.execute("SHOW TABLES LIKE 'Customers'")
table_exists = cursor.fetchone()

# Create the table if it doesn't exist
if not table_exists:
    cursor.execute("""
        CREATE TABLE Customers (
            id INT AUTO_INCREMENT PRIMARY KEY,
            name1 VARCHAR(255),
            email VARCHAR(255),
            phone BIGINT,
            location TEXT,
            signup_date DATE,
            is_premium BOOLEAN,
            preferred_cuisine VARCHAR(255),
            total_orders INT,
            average_rating FLOAT
        )
    """)
    print("✅ Customers table created successfully!")

# Insert 10 fake customers
for _ in range(100):
    cursor.execute(
        "INSERT INTO Customers (name, email, phone, location, signup_date, is_premium, preferred_cuisine, total_orders, average_rating) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s)",
        (
            fake.name(),
            fake.email(),
            random.randint(9000000000, 9999999999),  # Random 10-digit phone
            fake.address(),
            fake.date_between(start_date="-2y", end_date="today"),
            random.choice([1, 0]),  # 1 for Premium, 0 for Regular
            fake.random_element(["Indian", "Chinese", "Italian", "Mexican"]),
            random.randint(1, 50),
            round(random.uniform(1.0, 5.0), 1)  # Example: 3.2, 4.5
        )
    )

conn.commit()
print(" 10 Customers Inserted Successfully!")

import mysql.connector
from faker import Faker
import random

# Initialize Faker
fake = Faker()

# Connect to MySQL
conn = mysql.connector.connect(
    host="gateway01.ap-southeast-1.prod.aws.tidbcloud.com",
    user="7Z3SRE1xmB2xsHv.root",
    password="593g7sDIAPe2H7Og",
    database="PROJECT_1",
    port=4000
)
cursor = conn.cursor()

# Insert 10 fake restaurants
for i in range(10):
    cursor.execute( # Use cursor.execute to run the SQL query
        "INSERT INTO restaurants (restaurant_id, name, cuisine_type, location, owner_name, average_delivery_time, contact_number, rating, total_orders) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s)",
        (
            i + 1,  # Assuming restaurant_id should be unique
            fake.company(),  # Use fake.company() for restaurant name
            fake.random_element(["Indian", "Chinese", "Italian", "Mexican"]),
            fake.address(),
            fake.name(),
            random.randint(1, 50),
            random.randint(9000000000, 9999999999),  # Random 10-digit phone
            round(random.uniform(1.0, 5.0), 1),
            random.randint(1, 50)

        )
    )

conn.commit()
print(" 10 Restaurants Inserted Successfully!")

# Close connection
cursor.close()
conn.close()

!pip install mysql-connector-python

mycursor = conn.cursor()



!pip install faker # Make sure faker is installed.

# customer table 1 and imported


import mysql.connector
from faker import Faker
import random

# Initialize Faker
fake = Faker()

# Connect to MySQL
conn = mysql.connector.connect(
    host="gateway01.ap-southeast-1.prod.aws.tidbcloud.com",
    user="7Z3SRE1xmB2xsHv.root",
    password="593g7sDIAPe2H7Og",
    database="PROJECT_1",
    port=4000)

mycursor = conn.cursor()

# Check if Customers table exists before attempting to create it
mycursor.execute("SHOW TABLES LIKE 'Customers'")
table_exists = mycursor.fetchone()

if not table_exists:
    mycursor.execute("""CREATE TABLE Customers (
        customer_id INT PRIMARY KEY AUTO_INCREMENT,
        name VARCHAR(50) NOT NULL,
        email VARCHAR(50) UNIQUE NOT NULL,
        phone BIGINT NOT NULL,
        location VARCHAR(100),
        signup_date DATE NOT NULL,
        is_premium BOOLEAN DEFAULT 0,
        preferred_cuisine VARCHAR(50),
        total_orders INT DEFAULT 0 CHECK (total_orders >= 0),
        average_rating DECIMAL(3,1) CHECK (average_rating BETWEEN 1.0 AND 5.0)
    );""")
    print("Customers table created successfully!")
else:
    print("Customers table already exists.")

# using python faker

for i in range(100):
    # Use mycursor.execute() instead of insert_data() to insert data
    mycursor.execute(
        "INSERT INTO Customers (name, email, phone, location, signup_date, is_premium, preferred_cuisine, total_orders, average_rating) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s)",
        (
            fake.name(),
            fake.email(),
            random.randint(9000000000, 9999999999),
            fake.address(),
            fake.date_between(start_date="-2y", end_date="today"),
            random.choice([1, 0]),
            fake.random_element(["Indian", "Chinese", "Italian", "Mexican"]),
            random.randint(1, 50),
            round(random.uniform(1.0, 5.0), 1)
        )
    )

conn.commit()
print(" Data Inserted Successfully for All Tables!")

# real restaurants


import mysql.connector
from faker import Faker
import random

# Initialize Faker
fake = Faker()

# Connect to MySQL
conn = mysql.connector.connect(
    host="gateway01.ap-southeast-1.prod.aws.tidbcloud.com",
    user="7Z3SRE1xmB2xsHv.root",
    password="593g7sDIAPe2H7Og",
    database="PROJECT_1",
    port=4000)

mycursor = conn.cursor()

# Check if Customers table exists before attempting to create it
mycursor.execute("SHOW TABLES LIKE 'Customers'")
table_exists = mycursor.fetchone()

if not table_exists:
    mycursor.execute("""CREATE TABLE Customers (
        customer_id INT PRIMARY KEY AUTO_INCREMENT,
        name VARCHAR(50) NOT NULL,
        email VARCHAR(50) UNIQUE NOT NULL,
        phone BIGINT NOT NULL,
        location VARCHAR(100),
        signup_date DATE NOT NULL,
        is_premium BOOLEAN DEFAULT 0,
        preferred_cuisine VARCHAR(50),
        total_orders INT DEFAULT 0 CHECK (total_orders >= 0),
        average_rating DECIMAL(3,1) CHECK (average_rating BETWEEN 1.0 AND 5.0)
    );""")
    print("Customers table created successfully!")
else:
    print("Customers table already exists.")

# using python faker

for i in range(100):
    # Use mycursor.execute() instead of insert_data() to insert data
    try:  # Wrap the insert statement in a try-except block
        mycursor.execute(
            "INSERT INTO Customers (name, email, phone, location, signup_date, is_premium, preferred_cuisine, total_orders, average_rating) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s)",
            (
                fake.name(),
                fake.email(),
                random.randint(9000000000, 9999999999),
                fake.address(),
                fake.date_between(start_date="-2y", end_date="today"),
                random.choice([1, 0]),
                fake.random_element(["Indian", "Chinese", "Italian", "Mexican"]),
                random.randint(1, 50),
                round(random.uniform(1.0, 5.0), 1)
            )
        )
    except mysql.connector.errors.IntegrityError as e:
        # If a duplicate entry error occurs, print a message and continue
        if e.errno == 1062:  # Error code for duplicate entry
            print(f"Skipping duplicate email for iteration {i}: {e}")
        else:
            # If it's a different IntegrityError, raise it
            raise e

conn.commit()
print(" Data Inserted Successfully for All Tables!")

!pip install faker # Make sure faker is installed.

# restaurants table

import mysql.connector
from faker import Faker
import random

# Initialize Faker
fake = Faker()

# Connect to MySQL
conn = mysql.connector.connect(
    host="gateway01.ap-southeast-1.prod.aws.tidbcloud.com",
    user="7Z3SRE1xmB2xsHv.root",
    password="593g7sDIAPe2H7Og",
    database="PROJECT_1",
    port=4000)

mycursor = conn.cursor()

# Check if Restaurants table exists before attempting to create it
mycursor.execute("SHOW TABLES LIKE 'restaurants'")
table_exists = mycursor.fetchone()

if not table_exists:  # Check if the table exists
    mycursor.execute("""CREATE TABLE Restaurants (
            restaurant_id INT PRIMARY KEY AUTO_INCREMENT,
            restaurant_name VARCHAR(50) NOT NULL,
            cuisine_type VARCHAR(50) NOT NULL,
            location VARCHAR(100) NOT NULL,
            owner_name VARCHAR(50) NOT NULL,
            average_delivery_time FLOAT CHECK (average_delivery_time > 0),
            contact_number BIGINT NOT NULL,
            rating DECIMAL(3,1) CHECK (rating BETWEEN 1.0 AND 5.0),
            total_orders INT DEFAULT 0 CHECK (total_orders >= 0)
        );
    """)
    print("Restaurants table created successfully!")
else:
    print("Restaurants table already exists.")

# now using python faker for importing the data
for _ in range(500): # Insert 50 fake restaurants
    mycursor.execute(
        "INSERT INTO Restaurants (restaurant_name, cuisine_type, location, owner_name, average_delivery_time, contact_number, rating, total_orders) VALUES (%s, %s, %s, %s, %s, %s, %s, %s)",
        (
            fake.company(),  # Use fake.company() for restaurant name
            fake.random_element(["Indian", "Chinese", "Italian", "Mexican"]),
            fake.address(),
            fake.name(),
            random.randint(1, 50),
            random.randint(9000000000, 9999999999),  # Random 10-digit phone
            round(random.uniform(1.0, 5.0), 1),
            random.randint(1, 50)
        )
    )
conn.commit() # Commit the changes after inserting data
print("✅ 50 Restaurants Inserted Successfully!")

# creating the order table

# creating the order table


mycursor = conn.cursor()

# Check if Orders table exists before attempting to create it
mycursor.execute("SHOW TABLES LIKE 'Orders'")
table_exists = mycursor.fetchone()

if not table_exists:
    mycursor.execute("""CREATE TABLE Orders (
        order_id INT PRIMARY KEY AUTO_INCREMENT,
        customer_id INT NOT NULL,
        restaurant_id INT NOT NULL,
        order_date DATETIME NOT NULL,
        delivery_time DATETIME,
        status ENUM('Pending', 'Delivered', 'Cancelled') NOT NULL,
        total_amount DECIMAL(10,2) NOT NULL CHECK (total_amount >= 0),
        payment_mode ENUM('Credit Card', 'Cash', 'UPI') NOT NULL,
        discount_applied DECIMAL(10,2) DEFAULT 0 CHECK (discount_applied >= 0),
        feedback_rating DECIMAL(3,1) CHECK (feedback_rating BETWEEN 1.0 AND 5.0),
        FOREIGN KEY (customer_id) REFERENCES Customers(customer_id) ON DELETE CASCADE,
        FOREIGN KEY (restaurant_id) REFERENCES Restaurants(restaurant_id) ON DELETE CASCADE
    );""")
    print("Orders table created successfully!")
else:
    print("Orders table already exists.")


# Insert fake data into Orders Table
for _ in range(500):
    # Use mycursor.execute() for inserting data
    mycursor.execute(
        "INSERT INTO Orders (customer_id, restaurant_id, order_date, delivery_time, status, total_amount, payment_mode, discount_applied, feedback_rating) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s)",
        (
            random.randint(1, 100),  # Random customer_id
            random.randint(1, 50),   # Random restaurant_id
            fake.date_time_this_year(),
            fake.date_time_this_year(),
            fake.random_element(["Pending", "Delivered", "Cancelled"]),
            round(random.uniform(100, 2000), 2),  # Random order amount
            fake.random_element(["Credit Card", "Cash", "UPI"]),
            round(random.uniform(0, 200), 2),  # Discount amount
            round(random.uniform(1.0, 5.0), 1)  # Feedback rating
        )
    )

conn.commit()
print("✅ Orders Data Inserted Successfully!")

# Close connection
mycursor.close() # Use mycursor instead of cursor
conn.close()

# delvery table
# delvery table
import mysql.connector
from faker import Faker
import random

# Initialize Faker
fake = Faker()

# Connect to MySQL  # Re-establish the connection
conn = mysql.connector.connect(
    host="gateway01.ap-southeast-1.prod.aws.tidbcloud.com",
    user="7Z3SRE1xmB2xsHv.root",
    password="593g7sDIAPe2H7Og",
    database="PROJECT_1",
    port=4000
)

cursor = conn.cursor()


# Check if Deliveries table exists before attempting to create it
cursor.execute("SHOW TABLES LIKE 'Deliveries'")
table_exists = cursor.fetchone()

if not table_exists:
    cursor.execute("""CREATE TABLE Deliveries (
        delivery_id INT PRIMARY KEY AUTO_INCREMENT,
        order_id INT NOT NULL,
        delivery_person_id INT NOT NULL,
        delivery_status ENUM('On the way', 'Delivered', 'Delayed') NOT NULL,
        distance DECIMAL(5,2) NOT NULL CHECK (distance > 0),
        delivery_time INT NOT NULL CHECK (delivery_time > 0),
        estimated_time INT NOT NULL CHECK (estimated_time > 0),
        delivery_fee DECIMAL(10,2) NOT NULL CHECK (delivery_fee >= 0),
        vehicle_type ENUM('Bike', 'Car', 'Scooter') NOT NULL,
        FOREIGN KEY (order_id) REFERENCES Orders(order_id) ON DELETE CASCADE,
        FOREIGN KEY (delivery_person_id) REFERENCES DeliveryPersons(delivery_person_id) ON DELETE CASCADE
    );""")
    print("Deliveries table created successfully!")
else:
    print("Deliveries table already exists.")


# Insert fake data into Deliveries Table
for _ in range(500):
    cursor.execute(
        "INSERT INTO Deliveries (order_id, delivery_person_id, delivery_status, distance, delivery_time, estimated_time, delivery_fee, vehicle_type) VALUES (%s, %s, %s, %s, %s, %s, %s, %s)",
        (
            random.randint(1, 200),  # Random order_id
            random.randint(1, 50),  # Random delivery_person_id
            fake.random_element(["On the way", "Delivered", "Delayed"]),
            round(random.uniform(1, 30), 2),  # Distance in km
            random.randint(10, 60),  # Actual delivery time in minutes
            random.randint(10, 60),  # Estimated delivery time in minutes
            round(random.uniform(20, 150), 2),  # Delivery fee
            fake.random_element(["Bike", "Car", "Scooter"])
        )
    )

conn.commit()
print("✅ Deliveries Data Inserted Successfully!")

# Close connection
cursor.close()
conn.close()

!pip install streamlit

import streamlit as st
import mysql.connector
import pandas as pd

# Connect to MySQL
def get_connection():
    return mysql.connector.connect(
        host="gateway01.ap-southeast-1.prod.aws.tidbcloud.com",
        user="7Z3SRE1xmB2xsHv.root",
        password="593g7sDIAPe2H7Og",
        database="PROJECT_1",
        port=4000
    )

def run_query(query):
    conn = get_connection()
    cursor = conn.cursor()
    cursor.execute(query)
    result = cursor.fetchall()
    conn.close()
    return result

# Streamlit UI
st.title("📊 Zomato Data Insights Dashboard")

# Show total customers
st.subheader("👥 Total Customers")
total_customers = run_query("SELECT COUNT(*) FROM Customers;")
st.metric(label="Total Customers", value=total_customers[0][0])

# Show total orders
st.subheader("🛒 Total Orders")
total_orders = run_query("SELECT COUNT(*) FROM Orders;")
st.metric(label="Total Orders", value=total_orders[0][0])

# Show top 5 restaurants by order count
st.subheader("🏆 Top 5 Restaurants")
top_restaurants = run_query("""
    SELECT r.restaurant_name, COUNT(o.order_id) AS total_orders
    FROM Orders o
    JOIN Restaurants r ON o.restaurant_id = r.restaurant_id
    GROUP BY r.restaurant_name ORDER BY total_orders DESC LIMIT 5;
""")
df_top_restaurants = pd.DataFrame(top_restaurants, columns=["Restaurant", "Total Orders"])
st.dataframe(df_top_restaurants)

# Show total revenue generated
st.subheader("💰 Total Revenue")
total_revenue = run_query("SELECT SUM(total_amount) FROM Orders;")
st.metric(label="Total Revenue", value=f"₹ {total_revenue[0][0]:,.2f}")

# Show popular payment modes
st.subheader("💳 Payment Mode Usage")
payment_modes = run_query("""
    SELECT payment_mode, COUNT(*) FROM Orders
    GROUP BY payment_mode ORDER BY COUNT(*) DESC;
""")
df_payment_modes = pd.DataFrame(payment_modes, columns=["Payment Mode", "Usage Count"])
st.bar_chart(df_payment_modes.set_index("Payment Mode"))

# Show delivery time analysis
st.subheader("🚚 Average Delivery Time by Vehicle Type")
delivery_times = run_query("""
    SELECT vehicle_type, AVG(delivery_time) FROM Deliveries GROUP BY vehicle_type;
""")
df_delivery_times = pd.DataFrame(delivery_times, columns=["Vehicle Type", "Avg Delivery Time"])
st.bar_chart(df_delivery_times.set_index("Vehicle Type"))

st.write("📌 More insights coming soon...")

!streamlit run zomato_streamlit.py

!pip install streamlit mysql-connector-python pandas pyngrok

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# import streamlit as st
# import mysql.connector
# import pandas as pd
# 
# # Connect to MySQL
# def get_connection():
#     return mysql.connector.connect(
#         host="your_host",
#         user="your_user",
#         password="your_password",
#         database="PROJECT_1",
#         port=4000
#     )
# 
# # Function to run SQL queries
# def run_query(query):
#     conn = get_connection()
#     cursor = conn.cursor()
#     cursor.execute(query)
#     result = cursor.fetchall()
#     conn.close()
#     return result
# 
# # Streamlit UI
# st.title("📊 Zomato Data Insights Dashboard")
# 
# # Show total customers
# st.subheader("👥 Total Customers")
# total_customers = run_query("SELECT COUNT(*) FROM Customers;")
# st.metric(label="Total Customers", value=total_customers[0][0])
# 
# # Show total orders
# st.subheader("🛒 Total Orders")
# total_orders = run_query("SELECT COUNT(*) FROM Orders;")
# st.metric(label="Total Orders", value=total_orders[0][0])
# 
# # Show top 5 restaurants by order count
# st.subheader("🏆 Top 5 Restaurants")
# top_restaurants = run_query("""
#     SELECT r.restaurant_name, COUNT(o.order_id) AS total_orders
#     FROM Orders o
#     JOIN Restaurants r ON o.restaurant_id = r.restaurant_id
#     GROUP BY r.restaurant_name ORDER BY total_orders DESC LIMIT 5;
# """)
# df_top_restaurants = pd.DataFrame(top_restaurants, columns=["Restaurant", "Total Orders"])
# st.dataframe(df_top_restaurants)
# 
# # Show total revenue generated
# st.subheader("💰 Total Revenue")
# total_revenue = run_query("SELECT SUM(total_amount) FROM Orders;")
# st.metric(label="Total Revenue", value=f"₹ {total_revenue[0][0]:,.2f}")
# 
# # Show popular payment modes
# st.subheader("💳 Payment Mode Usage")
# payment_modes = run_query("""
#     SELECT payment_mode, COUNT(*) FROM Orders
#     GROUP BY payment_mode ORDER BY COUNT(*) DESC;
# """)
# df_payment_modes = pd.DataFrame(payment_modes, columns=["Payment Mode", "Usage Count"])
# st.bar_chart(df_payment_modes.set_index("Payment Mode"))
# 
# # Show delivery time analysis
# st.subheader("🚚 Average Delivery Time by Vehicle Type")
# delivery_times = run_query("""
#     SELECT vehicle_type, AVG(delivery_time) FROM Deliveries GROUP BY vehicle_type;
# """)
# df_delivery_times = pd.DataFrame(delivery_times, columns=["Vehicle Type", "Avg Delivery Time"])
# st.bar_chart(df_delivery_times.set_index("Vehicle Type"))
# 
# st.write("📌 More insights coming soon...")
#

!ngrok authtoken YOUR_NGROK_AUTH_TOKEN

!cat nohup.out

!pip install streamlit
!pip install pyngrok

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# import streamlit as st
# 
# st.title("Zomato - Food Delivery Data Insights")
# st.write("Welcome to the interactive Streamlit app for data entry and analysis!")
# 
# # Example: Text input
# user_input = st.text_input("Enter your name:")
# st.write("Hello, ", user_input)
#

from pyngrok import ngrok

# Kill any running Streamlit processes
!pkill -f streamlit

# Start Streamlit in the background
!nohup streamlit run app.py --server.port 8501 &

# Create a public URL using Ngrok
public_url = ngrok.connect(port="8501")
print("Streamlit App is running at:", public_url)

from pyngrok import ngrok

# ... (your other code) ...

# Authenticate with ngrok
ngrok.set_auth_token("your_actual_auth_token")  # Replace with your authtoken

# Start Streamlit and create a tunnel
!pkill -f streamlit
!nohup streamlit run app.py --server.port 8501 &
public_url = ngrok.connect(port="8501")
print("Streamlit App is running at:", public_url)

from pyngrok import ngrok

# ... (your other code) ...

# Authenticate with ngrok
ngrok.set_auth_token("your_actual_auth_token")  # Replace with your authtoken

# Start Streamlit and create a tunnel
!pkill -f streamlit
!nohup streamlit run app.py --server.port 8501 &
public_url = ngrok.connect(port="8501")
print("Streamlit App is running at:", public_url)

